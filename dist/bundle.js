!function(t){var i={};function e(s){if(i[s])return i[s].exports;var h=i[s]={i:s,l:!1,exports:{}};return t[s].call(h.exports,h,h.exports,e),h.l=!0,h.exports}e.m=t,e.c=i,e.d=function(t,i,s){e.o(t,i)||Object.defineProperty(t,i,{enumerable:!0,get:s})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,i){if(1&i&&(t=e(t)),8&i)return t;if(4&i&&"object"==typeof t&&t&&t.__esModule)return t;var s=Object.create(null);if(e.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:t}),2&i&&"string"!=typeof t)for(var h in t)e.d(s,h,function(i){return t[i]}.bind(null,h));return s},e.n=function(t){var i=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(i,"a",i),i},e.o=function(t,i){return Object.prototype.hasOwnProperty.call(t,i)},e.p="",e(e.s=0)}([function(t,i,e){"use strict";e.r(i);var s=function(t){return Math.floor(Math.random()*Math.floor(t))},h=function(t){var i=t.canvas,e=t.x,s=t.y,h=t.width,a=t.height,l=t.color,r=i.getContext("2d");r.fillStyle=l,r.fillRect(e,s,h,a)},a=function(t){var i=t.canvas,e=t.x,s=t.y,h=t.radius,a=t.color,l=i.getContext("2d");l.fillStyle=a,l.beginPath(),l.arc(e,s,h,0,2*Math.PI),l.closePath(),l.fill()},l=function(t,i){var e=t.getBoundingClientRect();return{x:i.clientX-e.left,y:i.clientY-e.top}},r=function(t){var i=t.x,e=t.y;return{tileCol:Math.floor(i/20),tileRow:Math.floor(e/20)}};class o{constructor(t,i){this.x=t,this.y=i,this.color="magenta",this.radius=15,this.speedRatio=1.3,this.deleteFlag=!1}updatePosition(t){this.enemyPlayerXDelta=t.x-this.x,this.enemyPlayerYDelta=t.y-this.y;const i=0==this.enemyPlayerXDelta?0:this.enemyPlayerXDelta>0?this.speedRatio:-1*this.speedRatio,e=0==this.enemyPlayerYDelta?0:this.enemyPlayerYDelta>0?this.speedRatio:-1*this.speedRatio;this.x+=i,this.y+=e}tryToKillPlayer(t){Math.abs(this.enemyPlayerXDelta)<t.radius+this.radius&&Math.abs(this.enemyPlayerYDelta)<t.radius+this.radius&&t.die()}draw(t){a({canvas:t,...this})}}class n extends o{constructor(t,i){super(t,i),this.color="blue",this.speedRatio=.8,this.circularMovementRadius=5,this.circularMovementSpeed=10,this.circularMovementAngle=0}updatePosition(t){super.updatePosition(t);let i=this.circularMovementRadius*Math.cos(this.circularMovementAngle*(Math.PI/180)),e=this.circularMovementRadius*Math.sin(this.circularMovementAngle*(Math.PI/180));this.circularMovementAngle+=this.circularMovementSpeed,this.x+=i,this.y+=e}}class d extends o{constructor(t,i){super(t,i),this.color="red",this.speedRatio=1.3,this.circularMovementRadius=8,this.circularMovementSpeed=15,this.circularMovementAngle=0}updatePosition(t){super.updatePosition(t);let i=this.circularMovementRadius*Math.cos(this.circularMovementAngle*(Math.PI/180));this.circularMovementAngle+=this.circularMovementSpeed,this.x+=i}}class y{constructor(t,i,e,s){this.x=t,this.y=i,this.dx=e,this.dy=s,this.color="darkslategray",this.radius=3,this.speed=15,this.deleteFlag=!1}updatePosition(){this.x+=this.dx*this.speed,this.y+=this.dy*this.speed}isOutOfBounds(){return this.x>800||this.x<0||this.y>600||this.y<0}collidedWithEnemy(t){return this.x>t.x-t.radius&&this.x<t.x+t.radius&&this.y>t.y-t.radius&&this.y<t.y+t.radius}draw(t){a({canvas:t,...this})}}class u{constructor(t,i){this.x=t,this.y=i,this.yDelta=0,this.xDelta=0,this.radius=15,this.color="white",this.onGround=!1,this.keyHoldRight=!1,this.keyHoldLeft=!1,this.xDirection=1,this.yDirection=0,this.isDrawing=!1,this.currentTileType=1,this.justToggledTile={tileCol:-1,tileRow:-1},this.bullets=[]}fire(){let t=0===this.yDirection?this.xDirection:0;this.bullets.push(new y(this.x,this.y,t,this.yDirection))}die(){this.yDelta=0,this.xDelta=0,this.x=100,this.y=100,this.onGround=!1}toggleBrick(t,{tileCol:i,tileRow:e}){i===this.justToggledTile.tileCol&&e===this.justToggledTile.tileRow||(0===t[e][i]?t[e][i]=this.currentTileType:t[e][i]=0,this.justToggledTile={tileCol:i,tileRow:e})}_applyGravity(){this.onGround||(this.yDelta+=.6),this.y+=this.yDelta}_detectSurroundings(t){this.playerFeet=r({x:this.x,y:this.y+this.radius}),this.playerRightSide=r({x:this.x+this.radius,y:this.y}),this.playerLeftSide=r({x:this.x-this.radius,y:this.y}),this.playerHead=r({x:this.x,y:this.y-this.radius}),this.playerFeetTile=void 0===t[this.playerFeet.tileRow]?0:t[this.playerFeet.tileRow][this.playerFeet.tileCol],this.playerRightSideTile=void 0===t[this.playerRightSide.tileRow]?0:t[this.playerRightSide.tileRow][this.playerRightSide.tileCol],this.playerLeftSideTile=void 0===t[this.playerLeftSide.tileRow]?0:t[this.playerLeftSide.tileRow][this.playerLeftSide.tileCol],this.playerHeadTile=void 0===t[this.playerHead.tileRow]?0:t[this.playerHead.tileRow][this.playerHead.tileCol],this.tileValuesAroundPlayer=[this.playerFeetTile,this.playerRightSideTile,this.playerLeftSideTile,this.playerHeadTile],this.tilesAroundPlayer=[this.playerFeet,this.playerRightSide,this.playerLeftSide,this.playerHead],this.touchingACoin=this.tileValuesAroundPlayer.indexOf(2)}_detectCollisions(t){if(-1!==this.touchingACoin){const i=this.tilesAroundPlayer[this.touchingACoin];t[i.tileRow][i.tileCol]=0}1===this.playerFeetTile&&this.yDelta>0&&this.y-this.radius<20*this.playerFeet.tileRow?(this.onGround=!0,this.yDelta=0):0===this.playerFeetTile&&(this.onGround=!1),this.keyHoldRight&&this.playerRightSideTile&&(this.x-=3),this.keyHoldLeft&&this.playerLeftSideTile&&(this.x+=3),(this.y>700||this.y<-200)&&this.die(),this.onGround&&this.y+this.radius>20*this.playerFeet.tileRow&&(this.y=20*this.playerFeet.tileRow-this.radius)}_movePlayerLeftRight(){this.keyHoldLeft&&(this.x-=3),this.keyHoldRight&&(this.x+=3)}updatePosition(t){this._applyGravity(),this._detectSurroundings(t),this._detectCollisions(t),this._movePlayerLeftRight()}draw(t){a({canvas:t,...this}),this._drawPlayerEyes(t)}_drawPlayerEyes(t){let i,e={radius:this.radius/5,color:"black"};0===this.yDirection?(e.y=this.y-this.radius/2,-1===this.xDirection?e.x=this.x-this.radius/2:e.x=this.x+this.radius/2,i={...e,x:e.x+2*e.radius*this.xDirection}):-1===this.yDirection?(e.y=this.y-this.radius,e.x=this.x-this.radius/4,i={...e,x:this.x+this.radius/3}):(e.y=this.y-this.radius/4,e.x=this.x-this.radius/4,i={...e,x:this.x+this.radius/3}),a({canvas:t,...e}),a({canvas:t,...i})}addEventListeners(t,i){t.addEventListener("mousedown",t=>{this.isDrawing=!0}),t.addEventListener("mouseup",e=>{this.isDrawing=!1;const s=l(t,e);this.toggleBrick(i,r(s)),this.justToggledTile={tileCol:-1,tileRow:-1}}),t.addEventListener("mousemove",e=>{if(this.isDrawing){const s=l(t,e);this.toggleBrick(i,r(s))}}),document.body.onkeydown=t=>{16==t.keyCode&&this.onGround?this.yDelta=-10:87==t.keyCode?this.yDirection=-1:83==t.keyCode?this.yDirection=1:65==t.keyCode?(this.keyHoldLeft=!0,this.xDirection=-1):68==t.keyCode?(this.keyHoldRight=!0,this.xDirection=1):191==t.keyCode&&this.fire()},document.body.onkeyup=t=>{65==t.keyCode?this.keyHoldLeft=!1:68==t.keyCode?this.keyHoldRight=!1:87!=t.keyCode&&83!=t.keyCode||(this.yDirection=0)}}}class c{constructor(t,i,e){this.enemies=[],this.tilesMatrix=function(){for(var t=[],i=0;i<30;i++){t.push([]);for(var e=0;e<40;e++)29===i?t[i].push(1):t[i].push(0)}return t}(),this.gameCanvas=document.getElementById(t),this.gameCanvas.width=i,this.gameCanvas.height=e,this.player=new u(100,100),this.enemyTypes=[o,d,n],this.newEnemyTypeIndex=0}play(){this._init(),setInterval(()=>this._mainLoop(),1e3/60),setInterval(()=>{const t=this.enemyTypes[this.newEnemyTypeIndex];this.enemies.push(new t(s(this.gameCanvas.width),s(this.gameCanvas.height))),this.newEnemyTypeIndex=++this.newEnemyTypeIndex%this.enemyTypes.length},3e3)}_init(){this.player.addEventListeners(this.gameCanvas,this.tilesMatrix),this._addCoinToTilesMatrix(this.tilesMatrix)}_mainLoop(){this._moveAll(),this._drawAll(this.gameCanvas,this.tilesMatrix)}_moveAll(){this.enemies=this.enemies.filter(t=>!t.deleteFlag),this.player.bullets=this.player.bullets.filter(t=>!t.deleteFlag),this.player.updatePosition(this.tilesMatrix),-1!==this.player.touchingACoin&&this._addCoinToTilesMatrix(this.tilesMatrix),this.enemies.forEach(t=>{t.updatePosition(this.player),t.tryToKillPlayer(this.player)}),this.player.bullets.forEach(t=>{t.updatePosition(),t.isOutOfBounds()&&(t.deleteFlag=!0),this.enemies.forEach(i=>{t.collidedWithEnemy(i)&&(t.deleteFlag=!0,i.deleteFlag=!0)})})}_drawAll(){var t,i;h({canvas:this.gameCanvas,x:0,y:0,height:600,width:800,color:"skyblue"}),t=this.gameCanvas,(i=this.tilesMatrix).forEach((function(e,s){e.forEach((function(e,a){var l=i[s][a],r=20*a,o=20*s;1===l&&h({canvas:t,x:r,y:o,height:19,width:19,color:"darkgreen"}),2===l&&h({canvas:t,x:r,y:o,height:19,width:19,color:"yellow"})}))})),this.player.draw(this.gameCanvas),this.enemies.forEach(t=>t.draw(this.gameCanvas)),this.player.bullets.forEach(t=>t.draw(this.gameCanvas))}_addCoinToTilesMatrix(t){t[s(29)][s(39)]=2}}window.onload=function(){new c("gameCanvas",800,600).play()}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,